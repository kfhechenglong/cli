{"version":3,"sources":["pages/splash/splash.js"],"names":["app","getApp","Page","data","movies","loading","getCache","Promise","wechat","getStorage","then","res","expires","Date","now","resolve","console","log","catch","handleStart","wx","switchTab","url","onLoad","cache","setData","douban","find","d","subjects","setStorage","onReady","onShow","onHide","onUnload","onPullDownRefresh"],"mappings":";;AAAA;AACA,IAAMA,MAAMC,QAAZ;;AAEA;AACAC,KAAK;AACH;;;AAGAC,QAAM;AACJC,YAAQ,EADJ;AAEJC,aAAS;AAFL,GAJH;;AASHC,UATG,sBASS;AACV,WAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BP,UAAIQ,MAAJ,CAAWC,UAAX,CAAsB,kBAAtB,EACGC,IADH,CACQ,eAAO;AAAA,wBACiBC,IAAIR,IADrB;AAAA,YACHC,MADG,aACHA,MADG;AAAA,YACKQ,OADL,aACKA,OADL;AAEX;;AACA,YAAIR,UAAUQ,UAAUC,KAAKC,GAAL,EAAxB,EAAoC;AAClC,iBAAOC,QAAQJ,IAAIR,IAAZ,CAAP;AACD;AACD;AACAa,gBAAQC,GAAR,CAAY,UAAZ;AACA,eAAOF,QAAQ,IAAR,CAAP;AACD,OAVH,EAWGG,KAXH,CAWS;AAAA,eAAKH,QAAQ,IAAR,CAAL;AAAA,OAXT;AAYD,KAbM,CAAP;AAcD,GAxBE;AA0BHI,aA1BG,yBA0BY;AACb;AACAC,OAAGC,SAAH,CAAa;AACXC,WAAK;AADM,KAAb;AAGD,GA/BE;;;AAiCH;;;AAGAC,QApCG,oBAoCO;AAAA;;AACR,SAAKjB,QAAL,GACGI,IADH,CACQ,iBAAS;AACb,UAAIc,KAAJ,EAAW;AACT,eAAO,MAAKC,OAAL,CAAa,EAAErB,QAAQoB,MAAMpB,MAAhB,EAAwBC,SAAS,KAAjC,EAAb,CAAP;AACD;;AAEDL,UAAI0B,MAAJ,CAAWC,IAAX,CAAgB,aAAhB,EAA+B,CAA/B,EAAkC,CAAlC,EACGjB,IADH,CACQ,aAAK;AACT,cAAKe,OAAL,CAAa,EAAErB,QAAQwB,EAAEC,QAAZ,EAAsBxB,SAAS,KAA/B,EAAb;AACA,eAAOL,IAAIQ,MAAJ,CAAWsB,UAAX,CAAsB,kBAAtB,EAA0C;AAC/C1B,kBAAQwB,EAAEC,QADqC;AAE/CjB,mBAASC,KAAKC,GAAL,KAAa,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB;AAFM,SAA1C,CAAP;AAID,OAPH,EAQGJ,IARH,CAQQ;AAAA,eAAMM,QAAQC,GAAR,CAAY,0BAAZ,CAAN;AAAA,OARR;AASD,KAfH;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAnFE;;;AAqFH;;;AAGAc,SAxFG,qBAwFQ;AACT;AACD,GA1FE;;;AA4FH;;;AAGAC,QA/FG,oBA+FO;AACR;AACD,GAjGE;;;AAmGH;;;AAGAC,QAtGG,oBAsGO;AACR;AACD,GAxGE;;;AA0GH;;;AAGAC,UA7GG,sBA6GS;AACV;AACD,GA/GE;;;AAiHH;;;AAGAC,mBApHG,+BAoHkB;AACnB;AACD;AAtHE,CAAL","file":"splash.js","sourcesContent":["// 获取全局应用程序实例对象\nconst app = getApp()\n\n// 创建页面实例对象\nPage({\n  /**\n   * 页面的初始数据\n   */\n  data: {\n    movies: [],\n    loading: true\n  },\n\n  getCache () {\n    return new Promise(resolve => {\n      app.wechat.getStorage('last_splash_data')\n        .then(res => {\n          const { movies, expires } = res.data\n          // 有缓存，判断是否过期\n          if (movies && expires > Date.now()) {\n            return resolve(res.data)\n          }\n          // 已经过期\n          console.log('uncached')\n          return resolve(null)\n        })\n        .catch(e => resolve(null))\n    })\n  },\n\n  handleStart () {\n    // TODO: 访问历史的问题\n    wx.switchTab({\n      url: '../board/board'\n    })\n  },\n\n  /**\n   * 生命周期函数--监听页面加载\n   */\n  onLoad () {\n    this.getCache()\n      .then(cache => {\n        if (cache) {\n          return this.setData({ movies: cache.movies, loading: false })\n        }\n\n        app.douban.find('coming_soon', 1, 3)\n          .then(d => {\n            this.setData({ movies: d.subjects, loading: false })\n            return app.wechat.setStorage('last_splash_data', {\n              movies: d.subjects,\n              expires: Date.now() + 1 * 24 * 60 * 60 * 1000\n            })\n          })\n          .then(() => console.log('storage last splash data'))\n      })\n\n    // app.wechat.getStorage('last_splash_data')\n    //   .then(res => {\n    //     if (res.data.expires < Date.now()) {\n    //       return console.log('storage expired')\n    //     }\n    //     return res.data.movies\n    //   })\n    //   .catch(e => {\n    //     console.log('get storage faild')\n    //     return app.douban.find('coming_soon', 1, 1).then(d => d.subjects)\n    //   })\n    //   .then(movies => {\n    //     if (movies) return movies\n    //     return app.douban.find('coming_soon', 1, 1).then(d => d.subjects)\n    //   })\n    //   .then(movies => {\n    //     this.setData({ movies, loading: false })\n    //     return app.wechat.setStorage('last_splash_data', {\n    //       movies: movies,\n    //       expires: Date.now() + 1 * 24 * 60 * 60 * 1000\n    //     })\n    //   })\n    //   .then(() => {\n    //     console.log('storage last splash data')\n    //   })\n    //   .catch(e => {\n    //     console.error(e)\n    //     this.setData({ loading: false })\n    //   })\n  },\n\n  /**\n   * 生命周期函数--监听页面初次渲染完成\n   */\n  onReady () {\n    // TODO: onReady\n  },\n\n  /**\n   * 生命周期函数--监听页面显示\n   */\n  onShow () {\n    // TODO: onShow\n  },\n\n  /**\n   * 生命周期函数--监听页面隐藏\n   */\n  onHide () {\n    // TODO: onHide\n  },\n\n  /**\n   * 生命周期函数--监听页面卸载\n   */\n  onUnload () {\n    // TODO: onUnload\n  },\n\n  /**\n   * 页面相关事件处理函数--监听用户下拉动作\n   */\n  onPullDownRefresh () {\n    // TODO: onPullDownRefresh\n  }\n})\n"]}